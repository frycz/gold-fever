{"version":3,"sources":["Game.tsx","Grid.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["config","Grid","width","height","playerX","playerY","items","enemies","className","Array","fill","map","_","y","style","display","x","find","item","enemy","pathfinder","PF","AStarFinder","initialState","currentLevel","maxLevel","points","player","collectGold","state","character","onItemCollected","itemIndex","findIndex","slice","Math","floor","random","length","stateReducer","gridWidth","gridHeight","action","reducers","reduce","accState","reducer","movePlayerReducer","newX","newY","movePlayer","moveEnemiesReducer","index","moveEnemy","enemyIndex","grid","setWalkableAt","forEach","itemsToCut","paths","findPath","clone","filter","path","sort","pathA","pathB","newEnemyX","newEnemyY","newState","Game","React","useReducer","dispatch","keyDownHandler","e","key","useEffect","window","addEventListener","removeEventListener","App","useState","level","setLevel","undefined","textAlign","marginBottom","marginTop","color","fontSize","flexDirection","alignItems","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbcbb62e.chunk.js","sourcesContent":["import React from \"react\";\nimport PF from \"pathfinding\";\nimport { Grid } from \"./Grid\";\n\nimport \"./Game.css\";\n\ntype Player = {\n  x: number;\n  y: number;\n};\n\ntype Item = {\n  x: number;\n  y: number;\n};\n\ntype Enemy = {\n  x: number;\n  y: number;\n};\n\ntype Action = \"up\" | \"down\" | \"left\" | \"right\";\n\ntype State = {\n  currentLevel: number;\n  maxLevel: number;\n  points: number;\n  player: Player;\n  items: Array<Item>;\n  enemies: Array<Enemy>;\n};\n\ntype Config = {\n  gridWidth: number;\n  gridHeight: number;\n};\n\ntype Reducer = (state: State, action: Action, config: Config) => State;\n\nconst gridWidth = 10;\nconst gridHeight = 10;\n\nvar pathfinder = new PF.AStarFinder();\n\nconst initialState: State = {\n  currentLevel: 0,\n  maxLevel: 0,\n  points: 0,\n  player: { x: 0, y: 0 },\n  items: [\n    { x: 2, y: 7 },\n    { x: 8, y: 5 },\n    { x: 4, y: 5 },\n    { x: 6, y: 3 },\n  ],\n  enemies: [\n    // { x: 0, y: 9 },\n    // { x: 9, y: 0 },\n    { x: 9, y: 9 },\n  ],\n};\n\nconst collectGold = (\n  state: State,\n  character: Player | Enemy,\n  onItemCollected: (state: State) => State\n) => {\n  const itemIndex = state.items.findIndex(\n    (item) => item.x === character.x && item.y === character.y\n  );\n\n  return {\n    ...state,\n    ...(itemIndex !== -1\n      ? {\n          ...onItemCollected(state),\n          items:\n            itemIndex !== -1\n              ? [\n                  ...state.items.slice(0, itemIndex),\n                  {\n                    x: Math.floor(gridWidth * Math.random()),\n                    y: Math.floor(gridHeight * Math.random()),\n                  },\n                  ...state.items.slice(itemIndex + 1, state.items.length),\n                ]\n              : state.items,\n        }\n      : {}),\n  };\n};\n\nconst movePlayer = (state: State, action: Action, config: Config) => {\n  let newX = state.player.x;\n  let newY = state.player.y;\n\n  if (action === \"up\") {\n    newX = state.player.x;\n    newY = state.player.y > 0 ? state.player.y - 1 : state.player.y;\n  }\n  if (action === \"down\") {\n    newX = state.player.x;\n    newY =\n      state.player.y < config.gridHeight - 1\n        ? state.player.y + 1\n        : state.player.y;\n  }\n  if (action === \"left\") {\n    newX = state.player.x > 0 ? state.player.x - 1 : state.player.x;\n    newY = state.player.y;\n  }\n  if (action === \"right\") {\n    newX =\n      state.player.x < config.gridWidth - 1\n        ? state.player.x + 1\n        : state.player.x;\n    newY = state.player.y;\n  }\n\n  return {\n    ...state,\n    player: {\n      x: newX,\n      y: newY,\n    },\n  };\n};\n\nconst getStateReducer =\n  (config: Config) =>\n  (initialState: State, action: Action, reducers: Array<Reducer>) =>\n    reducers.reduce(\n      (accState, reducer) => reducer(accState, action, config),\n      initialState\n    );\n\nconst stateReducer = getStateReducer({ gridWidth, gridHeight });\n\nconst movePlayerReducer = (accState: State, action: Action, config: Config) =>\n  movePlayer(accState, action, config);\nconst moveEnemiesReducer = (accState: State, action: Action, config: Config) =>\n  stateReducer(\n    accState,\n    action,\n    accState.enemies.map(\n      (_, index) => (accState, action, config) =>\n        moveEnemy(accState, index, pathfinder)\n    )\n  );\n\nconst moveEnemy = (\n  state: State,\n  enemyIndex: number,\n  pathfinder: PF.AStarFinder\n): State => {\n  const enemy = { ...state.enemies[enemyIndex] };\n  const grid = new PF.Grid(gridWidth, gridHeight);\n\n  grid.setWalkableAt(state.player.x, state.player.y, false);\n  state.enemies.forEach((_, index) => {\n    if (index !== enemyIndex) {\n      grid.setWalkableAt(state.enemies[index].x, state.enemies[index].y, false);\n    }\n  });\n\n  const itemsToCut = state.maxLevel - state.currentLevel;\n  const paths = state.items\n    .slice(\n      0,\n      state.items.length > itemsToCut\n        ? state.items.length - itemsToCut\n        : state.items.length\n    )\n    .map((item) =>\n      pathfinder.findPath(enemy.x, enemy.y, item.x, item.y, grid.clone())\n    )\n    .filter((path) => path.length)\n    .sort((pathA, pathB) => pathA.length - pathB.length);\n\n  const [newEnemyX, newEnemyY] =\n    paths[0] && paths[0][1] ? paths[0][1] : [enemy.x, enemy.y];\n\n  enemy.x = newEnemyX <= 9 && newEnemyX >= 0 ? newEnemyX : enemy.x;\n  enemy.y = newEnemyY <= 9 && newEnemyY >= 0 ? newEnemyY : enemy.y;\n\n  return {\n    ...state,\n    enemies: [\n      ...state.enemies.slice(0, enemyIndex),\n      enemy,\n      ...state.enemies.slice(enemyIndex + 1, state.enemies.length),\n    ],\n  };\n};\n\nconst reducer = (state: State, action: Action): State =>\n  stateReducer(state, action, [\n    movePlayerReducer,\n    (accState, action, config) =>\n      collectGold(accState, accState.player, (newState) => ({\n        ...newState,\n        points: newState.points + 1,\n      })),\n    moveEnemiesReducer,\n    (accState, action, config) =>\n      stateReducer(\n        accState,\n        action,\n        accState.enemies.map(\n          (enemy, index) => (accState: State, action: Action, config: Config) =>\n            collectGold(accState, enemy, (newState) => ({\n              ...newState,\n              points: newState.points - 1,\n            }))\n        )\n      ),\n  ]);\n\ntype Props = {\n  currentLevel: number;\n  maxLevel: number;\n};\n\nconst Game = ({ currentLevel, maxLevel }: Props) => {\n  const [state, dispatch] = React.useReducer(reducer, {\n    ...initialState,\n    currentLevel,\n    maxLevel,\n  });\n\n  const keyDownHandler = (e: KeyboardEvent) => {\n    if (e.key === \"ArrowUp\") {\n      dispatch(\"up\");\n    }\n    if (e.key === \"ArrowDown\") {\n      dispatch(\"down\");\n    }\n    if (e.key === \"ArrowLeft\") {\n      dispatch(\"left\");\n    }\n    if (e.key === \"ArrowRight\") {\n      dispatch(\"right\");\n    }\n  };\n\n  React.useEffect(() => {\n    window.addEventListener(\"keydown\", keyDownHandler);\n\n    return () => window.removeEventListener(\"keydown\", keyDownHandler);\n  }, []);\n\n  return (\n    <div className=\"grid-wrapper\">\n      <div className=\"grid-container\">\n        <div className=\"side\">\n          <div className=\"game-title\">Gold Fever</div>\n          <div className=\"game-description\">Collect all the gold</div>\n          <div className=\"game-instruction\">Use arrow keys to move</div>\n        </div>\n        <Grid\n          width={gridWidth}\n          height={gridHeight}\n          playerX={state.player.x}\n          playerY={state.player.y}\n          items={state.items}\n          enemies={state.enemies}\n        />\n        <div className=\"side\">\n          <div className=\"score\">\n            <div className=\"score-title\">Score:</div>\n            <div className=\"score-value\">{state.points}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport { Game };\n","import * as React from \"react\";\n\nimport \"./Grid.css\";\n\ntype Props = {\n  width: number;\n  height: number;\n  playerX: number;\n  playerY: number;\n  items: Array<{ x: number; y: number }>;\n  enemies: Array<{ x: number; y: number }>;\n};\n\nexport const Grid = ({\n  width,\n  height,\n  playerX,\n  playerY,\n  items,\n  enemies,\n}: Props) => (\n  <div className=\"grid\">\n    {Array(height)\n      .fill(null)\n      .map((_, y) => (\n        <div key={y} style={{ display: \"flex\" }}>\n          {Array(width)\n            .fill(null)\n            .map((_, x) => (\n              <div key={`${x}-${y}`} className=\"grid-field\">\n                {playerX === x && playerY === y ? (\n                  <div className=\"player-field\" />\n                ) : null}\n                {items.find((item) => item.x === x && item.y === y) ? (\n                  <div className=\"item-field\" />\n                ) : null}\n                {enemies.find((enemy) => enemy.x === x && enemy.y === y) ? (\n                  <div className=\"enemy-field\" />\n                ) : null}\n              </div>\n            ))}\n        </div>\n      ))}\n  </div>\n);\n","import React from \"react\";\nimport { Game } from \"./Game\";\n\nimport \"./App.css\";\n\nconst App = () => {\n  const [level, setLevel] = React.useState<number>();\n\n  return (\n    <div>\n      {level === undefined ? (\n        <div className=\"grid-wrapper\">\n          <div className=\"grid-container\">\n            <div className=\"side\" style={{ textAlign: \"center\" }}>\n              <div className=\"game-title\">Gold Fever</div>\n              <div className=\"game-description\">Collect all the gold</div>\n              <div\n                style={{\n                  marginBottom: \"20px\",\n                  marginTop: \"12px\",\n                  color: \"#887a12\",\n                  fontSize: \"24px\",\n                }}\n              >\n                Select difficulty level\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  alignItems: \"center\",\n                }}\n              >\n                {[\"Easy\", \"Medium\", \"Hard\", \"Master\"].map((level, index) => (\n                  <div\n                    className=\"button\"\n                    style={{ marginBottom: \"10px\" }}\n                    onClick={() => setLevel(index)}\n                  >\n                    {level}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      ) : (\n        <Game currentLevel={level} maxLevel={3} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}